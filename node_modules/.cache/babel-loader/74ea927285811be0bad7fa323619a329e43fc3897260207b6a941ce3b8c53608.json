{"ast":null,"code":"import _classPrivateMethodInitSpec from \"/Users/zohankhan/Downloads/zohan-test/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"/Users/zohankhan/Downloads/zohan-test/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _assertClassBrand from \"/Users/zohankhan/Downloads/zohan-test/node_modules/@babel/runtime/helpers/esm/assertClassBrand.js\";\nimport _classPrivateFieldGet from \"/Users/zohankhan/Downloads/zohan-test/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"/Users/zohankhan/Downloads/zohan-test/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nvar _client, _result, _queries, _observers, _combinedResult, _lastCombine, _lastResult, _Class_brand;\n// src/queriesObserver.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { QueryObserver } from \"./queryObserver.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { replaceEqualDeep } from \"./utils.js\";\nfunction difference(array1, array2) {\n  return array1.filter(x => !array2.includes(x));\n}\nfunction replaceAt(array, index, value) {\n  const copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\nvar QueriesObserver = (_client = /*#__PURE__*/new WeakMap(), _result = /*#__PURE__*/new WeakMap(), _queries = /*#__PURE__*/new WeakMap(), _observers = /*#__PURE__*/new WeakMap(), _combinedResult = /*#__PURE__*/new WeakMap(), _lastCombine = /*#__PURE__*/new WeakMap(), _lastResult = /*#__PURE__*/new WeakMap(), _Class_brand = /*#__PURE__*/new WeakSet(), class QueriesObserver extends Subscribable {\n  constructor(client, _queries2, _options) {\n    super();\n    _classPrivateMethodInitSpec(this, _Class_brand);\n    _classPrivateFieldInitSpec(this, _client, void 0);\n    _classPrivateFieldInitSpec(this, _result, void 0);\n    _classPrivateFieldInitSpec(this, _queries, void 0);\n    _classPrivateFieldInitSpec(this, _observers, void 0);\n    _classPrivateFieldInitSpec(this, _combinedResult, void 0);\n    _classPrivateFieldInitSpec(this, _lastCombine, void 0);\n    _classPrivateFieldInitSpec(this, _lastResult, void 0);\n    _classPrivateFieldSet(_client, this, client);\n    _classPrivateFieldSet(_queries, this, []);\n    _classPrivateFieldSet(_observers, this, []);\n    _classPrivateFieldSet(_result, this, []);\n    this.setQueries(_queries2);\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      _classPrivateFieldGet(_observers, this).forEach(observer => {\n        observer.subscribe(result => {\n          _assertClassBrand(_Class_brand, this, _onUpdate).call(this, observer, result);\n        });\n      });\n    }\n  }\n  onUnsubscribe() {\n    if (!this.listeners.size) {\n      this.destroy();\n    }\n  }\n  destroy() {\n    this.listeners = /* @__PURE__ */new Set();\n    _classPrivateFieldGet(_observers, this).forEach(observer => {\n      observer.destroy();\n    });\n  }\n  setQueries(queries, _options, notifyOptions) {\n    _classPrivateFieldSet(_queries, this, queries);\n    notifyManager.batch(() => {\n      const prevObservers = _classPrivateFieldGet(_observers, this);\n      const newObserverMatches = _assertClassBrand(_Class_brand, this, _findMatchingObservers).call(this, _classPrivateFieldGet(_queries, this));\n      newObserverMatches.forEach(match => match.observer.setOptions(match.defaultedQueryOptions, notifyOptions));\n      const newObservers = newObserverMatches.map(match => match.observer);\n      const newResult = newObservers.map(observer => observer.getCurrentResult());\n      const hasIndexChange = newObservers.some((observer, index) => observer !== prevObservers[index]);\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n      _classPrivateFieldSet(_observers, this, newObservers);\n      _classPrivateFieldSet(_result, this, newResult);\n      if (!this.hasListeners()) {\n        return;\n      }\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          _assertClassBrand(_Class_brand, this, _onUpdate).call(this, observer, result);\n        });\n      });\n      _assertClassBrand(_Class_brand, this, _notify).call(this);\n    });\n  }\n  getCurrentResult() {\n    return _classPrivateFieldGet(_result, this);\n  }\n  getQueries() {\n    return _classPrivateFieldGet(_observers, this).map(observer => observer.getCurrentQuery());\n  }\n  getObservers() {\n    return _classPrivateFieldGet(_observers, this);\n  }\n  getOptimisticResult(queries, combine) {\n    const matches = _assertClassBrand(_Class_brand, this, _findMatchingObservers).call(this, queries);\n    const result = matches.map(match => match.observer.getOptimisticResult(match.defaultedQueryOptions));\n    return [result, r => {\n      return _assertClassBrand(_Class_brand, this, _combineResult).call(this, r !== null && r !== void 0 ? r : result, combine);\n    }, () => {\n      return matches.map((match, index) => {\n        const observerResult = result[index];\n        return !match.defaultedQueryOptions.notifyOnChangeProps ? match.observer.trackResult(observerResult, accessedProp => {\n          matches.forEach(m => {\n            m.observer.trackProp(accessedProp);\n          });\n        }) : observerResult;\n      });\n    }];\n  }\n});\nfunction _combineResult(input, combine) {\n  if (combine) {\n    if (!_classPrivateFieldGet(_combinedResult, this) || _classPrivateFieldGet(_result, this) !== _classPrivateFieldGet(_lastResult, this) || combine !== _classPrivateFieldGet(_lastCombine, this)) {\n      _classPrivateFieldSet(_lastCombine, this, combine);\n      _classPrivateFieldSet(_lastResult, this, _classPrivateFieldGet(_result, this));\n      _classPrivateFieldSet(_combinedResult, this, replaceEqualDeep(_classPrivateFieldGet(_combinedResult, this), combine(input)));\n    }\n    return _classPrivateFieldGet(_combinedResult, this);\n  }\n  return input;\n}\nfunction _findMatchingObservers(queries) {\n  const prevObservers = _classPrivateFieldGet(_observers, this);\n  const prevObserversMap = new Map(prevObservers.map(observer => [observer.options.queryHash, observer]));\n  const defaultedQueryOptions = queries.map(options => _classPrivateFieldGet(_client, this).defaultQueryOptions(options));\n  const matchingObservers = defaultedQueryOptions.flatMap(defaultedOptions => {\n    const match = prevObserversMap.get(defaultedOptions.queryHash);\n    if (match != null) {\n      return [{\n        defaultedQueryOptions: defaultedOptions,\n        observer: match\n      }];\n    }\n    return [];\n  });\n  const matchedQueryHashes = new Set(matchingObservers.map(match => match.defaultedQueryOptions.queryHash));\n  const unmatchedQueries = defaultedQueryOptions.filter(defaultedOptions => !matchedQueryHashes.has(defaultedOptions.queryHash));\n  const getObserver = options => {\n    const defaultedOptions = _classPrivateFieldGet(_client, this).defaultQueryOptions(options);\n    const currentObserver = _classPrivateFieldGet(_observers, this).find(o => o.options.queryHash === defaultedOptions.queryHash);\n    return currentObserver !== null && currentObserver !== void 0 ? currentObserver : new QueryObserver(_classPrivateFieldGet(_client, this), defaultedOptions);\n  };\n  const newOrReusedObservers = unmatchedQueries.map(options => {\n    return {\n      defaultedQueryOptions: options,\n      observer: getObserver(options)\n    };\n  });\n  const sortMatchesByOrderOfQueries = (a, b) => defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n  return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n}\nfunction _onUpdate(observer, result) {\n  const index = _classPrivateFieldGet(_observers, this).indexOf(observer);\n  if (index !== -1) {\n    _classPrivateFieldSet(_result, this, replaceAt(_classPrivateFieldGet(_result, this), index, result));\n    _assertClassBrand(_Class_brand, this, _notify).call(this);\n  }\n}\nfunction _notify() {\n  notifyManager.batch(() => {\n    this.listeners.forEach(listener => {\n      listener(_classPrivateFieldGet(_result, this));\n    });\n  });\n}\nexport { QueriesObserver };","map":{"version":3,"names":["notifyManager","QueryObserver","Subscribable","replaceEqualDeep","difference","array1","array2","filter","x","includes","replaceAt","array","index","value","copy","slice","QueriesObserver","_client","WeakMap","_result","_queries","_observers","_combinedResult","_lastCombine","_lastResult","_Class_brand","WeakSet","constructor","client","queries","_options","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_classPrivateFieldSet","setQueries","onSubscribe","listeners","size","_classPrivateFieldGet","forEach","observer","subscribe","result","_assertClassBrand","_onUpdate","call","onUnsubscribe","destroy","Set","notifyOptions","batch","prevObservers","newObserverMatches","_findMatchingObservers","match","setOptions","defaultedQueryOptions","newObservers","map","newResult","getCurrentResult","hasIndexChange","some","length","hasListeners","_notify","getQueries","getCurrentQuery","getObservers","getOptimisticResult","combine","matches","r","_combineResult","observerResult","notifyOnChangeProps","trackResult","accessedProp","m","trackProp","input","prevObserversMap","Map","options","queryHash","defaultQueryOptions","matchingObservers","flatMap","defaultedOptions","get","matchedQueryHashes","unmatchedQueries","has","getObserver","currentObserver","find","o","newOrReusedObservers","sortMatchesByOrderOfQueries","a","b","indexOf","concat","sort","listener"],"sources":["/Users/zohankhan/Downloads/zohan-test/node_modules/@tanstack/query-core/src/queriesObserver.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\nimport { replaceEqualDeep } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  QueryObserverOptions,\n  QueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\n\nfunction difference<T>(array1: Array<T>, array2: Array<T>): Array<T> {\n  return array1.filter((x) => !array2.includes(x))\n}\n\nfunction replaceAt<T>(array: Array<T>, index: number, value: T): Array<T> {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\ntype QueriesObserverListener = (result: Array<QueryObserverResult>) => void\n\ntype CombineFn<TCombinedResult> = (\n  result: Array<QueryObserverResult>,\n) => TCombinedResult\n\nexport interface QueriesObserverOptions<\n  TCombinedResult = Array<QueryObserverResult>,\n> {\n  combine?: CombineFn<TCombinedResult>\n}\n\nexport class QueriesObserver<\n  TCombinedResult = Array<QueryObserverResult>,\n> extends Subscribable<QueriesObserverListener> {\n  #client: QueryClient\n  #result!: Array<QueryObserverResult>\n  #queries: Array<QueryObserverOptions>\n  #observers: Array<QueryObserver>\n  #combinedResult?: TCombinedResult\n  #lastCombine?: CombineFn<TCombinedResult>\n  #lastResult?: Array<QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    queries: Array<QueryObserverOptions>,\n    _options?: QueriesObserverOptions<TCombinedResult>,\n  ) {\n    super()\n\n    this.#client = client\n    this.#queries = []\n    this.#observers = []\n    this.#result = []\n\n    this.setQueries(queries)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.size) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: Array<QueryObserverOptions>,\n    _options?: QueriesObserverOptions<TCombinedResult>,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.#queries = queries\n\n    notifyManager.batch(() => {\n      const prevObservers = this.#observers\n\n      const newObserverMatches = this.#findMatchingObservers(this.#queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.#observers = newObservers\n      this.#result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n\n      this.#notify()\n    })\n  }\n\n  getCurrentResult(): Array<QueryObserverResult> {\n    return this.#result\n  }\n\n  getQueries() {\n    return this.#observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.#observers\n  }\n\n  getOptimisticResult(\n    queries: Array<QueryObserverOptions>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): [\n    rawResult: Array<QueryObserverResult>,\n    combineResult: (r?: Array<QueryObserverResult>) => TCombinedResult,\n    trackResult: () => Array<QueryObserverResult>,\n  ] {\n    const matches = this.#findMatchingObservers(queries)\n    const result = matches.map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n\n    return [\n      result,\n      (r?: Array<QueryObserverResult>) => {\n        return this.#combineResult(r ?? result, combine)\n      },\n      () => {\n        return matches.map((match, index) => {\n          const observerResult = result[index]!\n          return !match.defaultedQueryOptions.notifyOnChangeProps\n            ? match.observer.trackResult(observerResult, (accessedProp) => {\n                // track property on all observers to ensure proper (synchronized) tracking (#7000)\n                matches.forEach((m) => {\n                  m.observer.trackProp(accessedProp)\n                })\n              })\n            : observerResult\n        })\n      },\n    ]\n  }\n\n  #combineResult(\n    input: Array<QueryObserverResult>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): TCombinedResult {\n    if (combine) {\n      if (\n        !this.#combinedResult ||\n        this.#result !== this.#lastResult ||\n        combine !== this.#lastCombine\n      ) {\n        this.#lastCombine = combine\n        this.#lastResult = this.#result\n        this.#combinedResult = replaceEqualDeep(\n          this.#combinedResult,\n          combine(input),\n        )\n      }\n\n      return this.#combinedResult\n    }\n    return input as any\n  }\n\n  #findMatchingObservers(\n    queries: Array<QueryObserverOptions>,\n  ): Array<QueryObserverMatch> {\n    const prevObservers = this.#observers\n    const prevObserversMap = new Map(\n      prevObservers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const defaultedQueryOptions = queries.map((options) =>\n      this.#client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: Array<QueryObserverMatch> =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObserversMap.get(defaultedOptions.queryHash)\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = new Set(\n      matchingObservers.map((match) => match.defaultedQueryOptions.queryHash),\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) => !matchedQueryHashes.has(defaultedOptions.queryHash),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.#client.defaultQueryOptions(options)\n      const currentObserver = this.#observers.find(\n        (o) => o.options.queryHash === defaultedOptions.queryHash,\n      )\n      return (\n        currentObserver ?? new QueryObserver(this.#client, defaultedOptions)\n      )\n    }\n\n    const newOrReusedObservers: Array<QueryObserverMatch> =\n      unmatchedQueries.map((options) => {\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      })\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  #onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.#observers.indexOf(observer)\n    if (index !== -1) {\n      this.#result = replaceAt(this.#result, index, result)\n      this.#notify()\n    }\n  }\n\n  #notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(this.#result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}