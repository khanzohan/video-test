{"ast":null,"code":"import _classPrivateFieldInitSpec from \"/Users/zohankhan/Downloads/zohan-test/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"/Users/zohankhan/Downloads/zohan-test/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"/Users/zohankhan/Downloads/zohan-test/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nvar _queryCache, _mutationCache, _defaultOptions, _queryDefaults, _mutationDefaults, _mountCount, _unsubscribeFocus, _unsubscribeOnline;\n// src/queryClient.ts\nimport { functionalUpdate, hashKey, hashQueryKeyByOptions, noop, partialMatchKey, skipToken } from \"./utils.js\";\nimport { QueryCache } from \"./queryCache.js\";\nimport { MutationCache } from \"./mutationCache.js\";\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { infiniteQueryBehavior } from \"./infiniteQueryBehavior.js\";\nvar QueryClient = (_queryCache = /*#__PURE__*/new WeakMap(), _mutationCache = /*#__PURE__*/new WeakMap(), _defaultOptions = /*#__PURE__*/new WeakMap(), _queryDefaults = /*#__PURE__*/new WeakMap(), _mutationDefaults = /*#__PURE__*/new WeakMap(), _mountCount = /*#__PURE__*/new WeakMap(), _unsubscribeFocus = /*#__PURE__*/new WeakMap(), _unsubscribeOnline = /*#__PURE__*/new WeakMap(), class QueryClient {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classPrivateFieldInitSpec(this, _queryCache, void 0);\n    _classPrivateFieldInitSpec(this, _mutationCache, void 0);\n    _classPrivateFieldInitSpec(this, _defaultOptions, void 0);\n    _classPrivateFieldInitSpec(this, _queryDefaults, void 0);\n    _classPrivateFieldInitSpec(this, _mutationDefaults, void 0);\n    _classPrivateFieldInitSpec(this, _mountCount, void 0);\n    _classPrivateFieldInitSpec(this, _unsubscribeFocus, void 0);\n    _classPrivateFieldInitSpec(this, _unsubscribeOnline, void 0);\n    _classPrivateFieldSet(_queryCache, this, config.queryCache || new QueryCache());\n    _classPrivateFieldSet(_mutationCache, this, config.mutationCache || new MutationCache());\n    _classPrivateFieldSet(_defaultOptions, this, config.defaultOptions || {});\n    _classPrivateFieldSet(_queryDefaults, this, /* @__PURE__ */new Map());\n    _classPrivateFieldSet(_mutationDefaults, this, /* @__PURE__ */new Map());\n    _classPrivateFieldSet(_mountCount, this, 0);\n  }\n  mount() {\n    var _this$mountCount, _this$mountCount2;\n    _classPrivateFieldSet(_mountCount, this, (_this$mountCount = _classPrivateFieldGet(_mountCount, this), _this$mountCount2 = _this$mountCount++, _this$mountCount)), _this$mountCount2;\n    if (_classPrivateFieldGet(_mountCount, this) !== 1) return;\n    _classPrivateFieldSet(_unsubscribeFocus, this, focusManager.subscribe(async focused => {\n      if (focused) {\n        await this.resumePausedMutations();\n        _classPrivateFieldGet(_queryCache, this).onFocus();\n      }\n    }));\n    _classPrivateFieldSet(_unsubscribeOnline, this, onlineManager.subscribe(async online => {\n      if (online) {\n        await this.resumePausedMutations();\n        _classPrivateFieldGet(_queryCache, this).onOnline();\n      }\n    }));\n  }\n  unmount() {\n    var _this$mountCount3, _this$mountCount4, _classPrivateFieldGet2, _classPrivateFieldGet3;\n    _classPrivateFieldSet(_mountCount, this, (_this$mountCount3 = _classPrivateFieldGet(_mountCount, this), _this$mountCount4 = _this$mountCount3--, _this$mountCount3)), _this$mountCount4;\n    if (_classPrivateFieldGet(_mountCount, this) !== 0) return;\n    (_classPrivateFieldGet2 = _classPrivateFieldGet(_unsubscribeFocus, this)) === null || _classPrivateFieldGet2 === void 0 || _classPrivateFieldGet2.call(this);\n    _classPrivateFieldSet(_unsubscribeFocus, this, void 0);\n    (_classPrivateFieldGet3 = _classPrivateFieldGet(_unsubscribeOnline, this)) === null || _classPrivateFieldGet3 === void 0 || _classPrivateFieldGet3.call(this);\n    _classPrivateFieldSet(_unsubscribeOnline, this, void 0);\n  }\n  isFetching(filters) {\n    return _classPrivateFieldGet(_queryCache, this).findAll({\n      ...filters,\n      fetchStatus: \"fetching\"\n    }).length;\n  }\n  isMutating(filters) {\n    return _classPrivateFieldGet(_mutationCache, this).findAll({\n      ...filters,\n      status: \"pending\"\n    }).length;\n  }\n  getQueryData(queryKey) {\n    var _classPrivateFieldGet4;\n    const options = this.defaultQueryOptions({\n      queryKey\n    });\n    return (_classPrivateFieldGet4 = _classPrivateFieldGet(_queryCache, this).get(options.queryHash)) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.state.data;\n  }\n  ensureQueryData(options) {\n    const cachedData = this.getQueryData(options.queryKey);\n    if (cachedData === void 0) return this.fetchQuery(options);else {\n      const defaultedOptions = this.defaultQueryOptions(options);\n      const query = _classPrivateFieldGet(_queryCache, this).build(this, defaultedOptions);\n      if (options.revalidateIfStale && query.isStaleByTime(defaultedOptions.staleTime)) {\n        void this.prefetchQuery(defaultedOptions);\n      }\n      return Promise.resolve(cachedData);\n    }\n  }\n  getQueriesData(filters) {\n    return _classPrivateFieldGet(_queryCache, this).findAll(filters).map(_ref => {\n      let {\n        queryKey,\n        state\n      } = _ref;\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n  setQueryData(queryKey, updater, options) {\n    const defaultedOptions = this.defaultQueryOptions({\n      queryKey\n    });\n    const query = _classPrivateFieldGet(_queryCache, this).get(defaultedOptions.queryHash);\n    const prevData = query === null || query === void 0 ? void 0 : query.state.data;\n    const data = functionalUpdate(updater, prevData);\n    if (data === void 0) {\n      return void 0;\n    }\n    return _classPrivateFieldGet(_queryCache, this).build(this, defaultedOptions).setData(data, {\n      ...options,\n      manual: true\n    });\n  }\n  setQueriesData(filters, updater, options) {\n    return notifyManager.batch(() => _classPrivateFieldGet(_queryCache, this).findAll(filters).map(_ref2 => {\n      let {\n        queryKey\n      } = _ref2;\n      return [queryKey, this.setQueryData(queryKey, updater, options)];\n    }));\n  }\n  getQueryState(queryKey) {\n    var _classPrivateFieldGet5;\n    const options = this.defaultQueryOptions({\n      queryKey\n    });\n    return (_classPrivateFieldGet5 = _classPrivateFieldGet(_queryCache, this).get(options.queryHash)) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.state;\n  }\n  removeQueries(filters) {\n    const queryCache = _classPrivateFieldGet(_queryCache, this);\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query);\n      });\n    });\n  }\n  resetQueries(filters, options) {\n    const queryCache = _classPrivateFieldGet(_queryCache, this);\n    const refetchFilters = {\n      type: \"active\",\n      ...filters\n    };\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset();\n      });\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n  cancelQueries() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let cancelOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const defaultedCancelOptions = {\n      revert: true,\n      ...cancelOptions\n    };\n    const promises = notifyManager.batch(() => _classPrivateFieldGet(_queryCache, this).findAll(filters).map(query => query.cancel(defaultedCancelOptions)));\n    return Promise.all(promises).then(noop).catch(noop);\n  }\n  invalidateQueries() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return notifyManager.batch(() => {\n      var _ref3, _filters$refetchType;\n      _classPrivateFieldGet(_queryCache, this).findAll(filters).forEach(query => {\n        query.invalidate();\n      });\n      if (filters.refetchType === \"none\") {\n        return Promise.resolve();\n      }\n      const refetchFilters = {\n        ...filters,\n        type: (_ref3 = (_filters$refetchType = filters.refetchType) !== null && _filters$refetchType !== void 0 ? _filters$refetchType : filters.type) !== null && _ref3 !== void 0 ? _ref3 : \"active\"\n      };\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n  refetchQueries() {\n    var _options$cancelRefetc;\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    const fetchOptions = {\n      ...options,\n      cancelRefetch: (_options$cancelRefetc = options === null || options === void 0 ? void 0 : options.cancelRefetch) !== null && _options$cancelRefetc !== void 0 ? _options$cancelRefetc : true\n    };\n    const promises = notifyManager.batch(() => _classPrivateFieldGet(_queryCache, this).findAll(filters).filter(query => !query.isDisabled()).map(query => {\n      let promise = query.fetch(void 0, fetchOptions);\n      if (!fetchOptions.throwOnError) {\n        promise = promise.catch(noop);\n      }\n      return query.state.fetchStatus === \"paused\" ? Promise.resolve() : promise;\n    }));\n    return Promise.all(promises).then(noop);\n  }\n  fetchQuery(options) {\n    const defaultedOptions = this.defaultQueryOptions(options);\n    if (defaultedOptions.retry === void 0) {\n      defaultedOptions.retry = false;\n    }\n    const query = _classPrivateFieldGet(_queryCache, this).build(this, defaultedOptions);\n    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n  prefetchQuery(options) {\n    return this.fetchQuery(options).then(noop).catch(noop);\n  }\n  fetchInfiniteQuery(options) {\n    options.behavior = infiniteQueryBehavior(options.pages);\n    return this.fetchQuery(options);\n  }\n  prefetchInfiniteQuery(options) {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop);\n  }\n  resumePausedMutations() {\n    if (onlineManager.isOnline()) {\n      return _classPrivateFieldGet(_mutationCache, this).resumePausedMutations();\n    }\n    return Promise.resolve();\n  }\n  getQueryCache() {\n    return _classPrivateFieldGet(_queryCache, this);\n  }\n  getMutationCache() {\n    return _classPrivateFieldGet(_mutationCache, this);\n  }\n  getDefaultOptions() {\n    return _classPrivateFieldGet(_defaultOptions, this);\n  }\n  setDefaultOptions(options) {\n    _classPrivateFieldSet(_defaultOptions, this, options);\n  }\n  setQueryDefaults(queryKey, options) {\n    _classPrivateFieldGet(_queryDefaults, this).set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options\n    });\n  }\n  getQueryDefaults(queryKey) {\n    const defaults = [..._classPrivateFieldGet(_queryDefaults, this).values()];\n    let result = {};\n    defaults.forEach(queryDefault => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        result = {\n          ...result,\n          ...queryDefault.defaultOptions\n        };\n      }\n    });\n    return result;\n  }\n  setMutationDefaults(mutationKey, options) {\n    _classPrivateFieldGet(_mutationDefaults, this).set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options\n    });\n  }\n  getMutationDefaults(mutationKey) {\n    const defaults = [..._classPrivateFieldGet(_mutationDefaults, this).values()];\n    let result = {};\n    defaults.forEach(queryDefault => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        result = {\n          ...result,\n          ...queryDefault.defaultOptions\n        };\n      }\n    });\n    return result;\n  }\n  defaultQueryOptions(options) {\n    if (options._defaulted) {\n      return options;\n    }\n    const defaultedOptions = {\n      ..._classPrivateFieldGet(_defaultOptions, this).queries,\n      ...this.getQueryDefaults(options.queryKey),\n      ...options,\n      _defaulted: true\n    };\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n    }\n    if (defaultedOptions.refetchOnReconnect === void 0) {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== \"always\";\n    }\n    if (defaultedOptions.throwOnError === void 0) {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense;\n    }\n    if (!defaultedOptions.networkMode && defaultedOptions.persister) {\n      defaultedOptions.networkMode = \"offlineFirst\";\n    }\n    if (defaultedOptions.enabled !== true && defaultedOptions.queryFn === skipToken) {\n      defaultedOptions.enabled = false;\n    }\n    return defaultedOptions;\n  }\n  defaultMutationOptions(options) {\n    if (options !== null && options !== void 0 && options._defaulted) {\n      return options;\n    }\n    return {\n      ..._classPrivateFieldGet(_defaultOptions, this).mutations,\n      ...((options === null || options === void 0 ? void 0 : options.mutationKey) && this.getMutationDefaults(options.mutationKey)),\n      ...options,\n      _defaulted: true\n    };\n  }\n  clear() {\n    _classPrivateFieldGet(_queryCache, this).clear();\n    _classPrivateFieldGet(_mutationCache, this).clear();\n  }\n});\nexport { QueryClient };","map":{"version":3,"names":["functionalUpdate","hashKey","hashQueryKeyByOptions","noop","partialMatchKey","skipToken","QueryCache","MutationCache","focusManager","onlineManager","notifyManager","infiniteQueryBehavior","QueryClient","_queryCache","WeakMap","_mutationCache","_defaultOptions","_queryDefaults","_mutationDefaults","_mountCount","_unsubscribeFocus","_unsubscribeOnline","constructor","config","arguments","length","undefined","_classPrivateFieldInitSpec","_classPrivateFieldSet","queryCache","mutationCache","defaultOptions","Map","mount","_this$mountCount","_this$mountCount2","_classPrivateFieldGet","subscribe","focused","resumePausedMutations","onFocus","online","onOnline","unmount","_this$mountCount3","_this$mountCount4","_classPrivateFieldGet2","_classPrivateFieldGet3","call","isFetching","filters","findAll","fetchStatus","isMutating","status","getQueryData","queryKey","_classPrivateFieldGet4","options","defaultQueryOptions","get","queryHash","state","data","ensureQueryData","cachedData","fetchQuery","defaultedOptions","query","build","revalidateIfStale","isStaleByTime","staleTime","prefetchQuery","Promise","resolve","getQueriesData","map","_ref","setQueryData","updater","prevData","setData","manual","setQueriesData","batch","_ref2","getQueryState","_classPrivateFieldGet5","removeQueries","forEach","remove","resetQueries","refetchFilters","type","reset","refetchQueries","cancelQueries","cancelOptions","defaultedCancelOptions","revert","promises","cancel","all","then","catch","invalidateQueries","_ref3","_filters$refetchType","invalidate","refetchType","_options$cancelRefetc","fetchOptions","cancelRefetch","filter","isDisabled","promise","fetch","throwOnError","retry","fetchInfiniteQuery","behavior","pages","prefetchInfiniteQuery","isOnline","getQueryCache","getMutationCache","getDefaultOptions","setDefaultOptions","setQueryDefaults","set","getQueryDefaults","defaults","values","result","queryDefault","setMutationDefaults","mutationKey","getMutationDefaults","_defaulted","queries","refetchOnReconnect","networkMode","suspense","persister","enabled","queryFn","defaultMutationOptions","mutations","clear"],"sources":["/Users/zohankhan/Downloads/zohan-test/node_modules/@tanstack/query-core/src/queryClient.ts"],"sourcesContent":["import {\n  functionalUpdate,\n  hashKey,\n  hashQueryKeyByOptions,\n  noop,\n  partialMatchKey,\n  skipToken,\n} from './utils'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport type { DataTag, NoInfer, OmitKeyof } from './types'\nimport type { QueryState } from './query'\nimport type {\n  CancelOptions,\n  DefaultError,\n  DefaultOptions,\n  DefaultedQueryObserverOptions,\n  EnsureQueryDataOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryClientConfig,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  SetDataOptions,\n} from './types'\nimport type { MutationFilters, QueryFilters, Updater } from './utils'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: OmitKeyof<QueryOptions<any, any, any>, 'queryKey'>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  #queryCache: QueryCache\n  #mutationCache: MutationCache\n  #defaultOptions: DefaultOptions\n  #queryDefaults: Map<string, QueryDefaults>\n  #mutationDefaults: Map<string, MutationDefaults>\n  #mountCount: number\n  #unsubscribeFocus?: () => void\n  #unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.#queryCache = config.queryCache || new QueryCache()\n    this.#mutationCache = config.mutationCache || new MutationCache()\n    this.#defaultOptions = config.defaultOptions || {}\n    this.#queryDefaults = new Map()\n    this.#mutationDefaults = new Map()\n    this.#mountCount = 0\n  }\n\n  mount(): void {\n    this.#mountCount++\n    if (this.#mountCount !== 1) return\n\n    this.#unsubscribeFocus = focusManager.subscribe(async (focused) => {\n      if (focused) {\n        await this.resumePausedMutations()\n        this.#queryCache.onFocus()\n      }\n    })\n    this.#unsubscribeOnline = onlineManager.subscribe(async (online) => {\n      if (online) {\n        await this.resumePausedMutations()\n        this.#queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.#mountCount--\n    if (this.#mountCount !== 0) return\n\n    this.#unsubscribeFocus?.()\n    this.#unsubscribeFocus = undefined\n\n    this.#unsubscribeOnline?.()\n    this.#unsubscribeOnline = undefined\n  }\n\n  isFetching(filters?: QueryFilters): number {\n    return this.#queryCache.findAll({ ...filters, fetchStatus: 'fetching' })\n      .length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.#mutationCache.findAll({ ...filters, status: 'pending' }).length\n  }\n\n  getQueryData<\n    TQueryFnData = unknown,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TTaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(queryKey: TTaggedQueryKey): TInferredQueryFnData | undefined\n  getQueryData(queryKey: QueryKey) {\n    const options = this.defaultQueryOptions({ queryKey })\n    return this.#queryCache.get(options.queryHash)?.state.data\n  }\n\n  ensureQueryData<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: EnsureQueryDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const cachedData = this.getQueryData<TData>(options.queryKey)\n\n    if (cachedData === undefined) return this.fetchQuery(options)\n    else {\n      const defaultedOptions = this.defaultQueryOptions(options)\n      const query = this.#queryCache.build(this, defaultedOptions)\n\n      if (\n        options.revalidateIfStale &&\n        query.isStaleByTime(defaultedOptions.staleTime)\n      ) {\n        void this.prefetchQuery(defaultedOptions)\n      }\n\n      return Promise.resolve(cachedData)\n    }\n  }\n\n  getQueriesData<TQueryFnData = unknown>(\n    filters: QueryFilters,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return this.#queryCache.findAll(filters).map(({ queryKey, state }) => {\n      const data = state.data as TQueryFnData | undefined\n      return [queryKey, data]\n    })\n  }\n\n  setQueryData<\n    TQueryFnData = unknown,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TTaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(\n    queryKey: TTaggedQueryKey,\n    updater: Updater<\n      NoInfer<TInferredQueryFnData> | undefined,\n      NoInfer<TInferredQueryFnData> | undefined\n    >,\n    options?: SetDataOptions,\n  ): TInferredQueryFnData | undefined {\n    const defaultedOptions = this.defaultQueryOptions<\n      any,\n      any,\n      unknown,\n      any,\n      QueryKey\n    >({ queryKey })\n\n    const query = this.#queryCache.get<TInferredQueryFnData>(\n      defaultedOptions.queryHash,\n    )\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (data === undefined) {\n      return undefined\n    }\n\n    return this.#queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<TQueryFnData>(\n    filters: QueryFilters,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TQueryFnData>(queryKey, updater, options),\n        ]),\n    )\n  }\n\n  getQueryState<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TTaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(\n    queryKey: TTaggedQueryKey,\n  ): QueryState<TInferredQueryFnData, TError> | undefined {\n    const options = this.defaultQueryOptions({ queryKey })\n    return this.#queryCache.get<TInferredQueryFnData, TError>(options.queryHash)\n      ?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void {\n    const queryCache = this.#queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries(filters?: QueryFilters, options?: ResetOptions): Promise<void> {\n    const queryCache = this.#queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      type: 'active',\n      ...filters,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(\n    filters: QueryFilters = {},\n    cancelOptions: CancelOptions = {},\n  ): Promise<void> {\n    const defaultedCancelOptions = { revert: true, ...cancelOptions }\n\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map((query) => query.cancel(defaultedCancelOptions)),\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries(\n    filters: InvalidateQueryFilters = {},\n    options: InvalidateOptions = {},\n  ): Promise<void> {\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach((query) => {\n        query.invalidate()\n      })\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      const refetchFilters: RefetchQueryFilters = {\n        ...filters,\n        type: filters.refetchType ?? filters.type ?? 'active',\n      }\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries(\n    filters: RefetchQueryFilters = {},\n    options?: RefetchOptions,\n  ): Promise<void> {\n    const fetchOptions = {\n      ...options,\n      cancelRefetch: options?.cancelRefetch ?? true,\n    }\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .filter((query) => !query.isDisabled())\n        .map((query) => {\n          let promise = query.fetch(undefined, fetchOptions)\n          if (!fetchOptions.throwOnError) {\n            promise = promise.catch(noop)\n          }\n          return query.state.fetchStatus === 'paused'\n            ? Promise.resolve()\n            : promise\n        }),\n    )\n\n    return Promise.all(promises).then(noop)\n  }\n\n  fetchQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options: FetchQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<TData> {\n    const defaultedOptions = this.defaultQueryOptions(options)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (defaultedOptions.retry === undefined) {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.#queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchQuery(options).then(noop).catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<InfiniteData<TData, TPageParam>> {\n    options.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData,\n      TPageParam\n    >(options.pages)\n    return this.fetchQuery(options)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop)\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    if (onlineManager.isOnline()) {\n      return this.#mutationCache.resumePausedMutations()\n    }\n    return Promise.resolve()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.#queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.#mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.#defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.#defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: Partial<\n      OmitKeyof<QueryObserverOptions<unknown, any, any, any>, 'queryKey'>\n    >,\n  ): void {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options,\n    })\n  }\n\n  getQueryDefaults(\n    queryKey: QueryKey,\n  ): OmitKeyof<QueryObserverOptions<any, any, any, any, any>, 'queryKey'> {\n    const defaults = [...this.#queryDefaults.values()]\n\n    let result: OmitKeyof<\n      QueryObserverOptions<any, any, any, any, any>,\n      'queryKey'\n    > = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        result = { ...result, ...queryDefault.defaultOptions }\n      }\n    })\n    return result\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: OmitKeyof<\n      MutationObserverOptions<any, any, any, any>,\n      'mutationKey'\n    >,\n  ): void {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options,\n    })\n  }\n\n  getMutationDefaults(\n    mutationKey: MutationKey,\n  ): MutationObserverOptions<any, any, any, any> {\n    const defaults = [...this.#mutationDefaults.values()]\n\n    let result: MutationObserverOptions<any, any, any, any> = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        result = { ...result, ...queryDefault.defaultOptions }\n      }\n    })\n\n    return result\n  }\n\n  defaultQueryOptions<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options:\n      | QueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey,\n          TPageParam\n        >\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >,\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.#defaultOptions.queries,\n      ...this.getQueryDefaults(options.queryKey),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions,\n      )\n    }\n\n    // dependent default values\n    if (defaultedOptions.refetchOnReconnect === undefined) {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (defaultedOptions.throwOnError === undefined) {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense\n    }\n\n    if (!defaultedOptions.networkMode && defaultedOptions.persister) {\n      defaultedOptions.networkMode = 'offlineFirst'\n    }\n\n    if (\n      defaultedOptions.enabled !== true &&\n      defaultedOptions.queryFn === skipToken\n    ) {\n      defaultedOptions.enabled = false\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T,\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.#defaultOptions.mutations,\n      ...(options?.mutationKey &&\n        this.getMutationDefaults(options.mutationKey)),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.#queryCache.clear()\n    this.#mutationCache.clear()\n  }\n}\n"],"mappings":";;;;;AAAA,SACEA,gBAAA,EACAC,OAAA,EACAC,qBAAA,EACAC,IAAA,EACAC,eAAA,EACAC,SAAA,QACK;AACP,SAASC,UAAA,QAAkB;AAC3B,SAASC,aAAA,QAAqB;AAC9B,SAASC,YAAA,QAAoB;AAC7B,SAASC,aAAA,QAAqB;AAC9B,SAASC,aAAA,QAAqB;AAC9B,SAASC,qBAAA,QAA6B;AA0C/B,IAAMC,WAAA,IAAAC,WAAA,oBAAAC,OAAA,IAAAC,cAAA,oBAAAD,OAAA,IAAAE,eAAA,oBAAAF,OAAA,IAAAG,cAAA,oBAAAH,OAAA,IAAAI,iBAAA,oBAAAJ,OAAA,IAAAK,WAAA,oBAAAL,OAAA,IAAAM,iBAAA,oBAAAN,OAAA,IAAAO,kBAAA,oBAAAP,OAAA,IAAN,MAAMF,WAAA,CAAY;EAUvBU,YAAA,EAA4C;IAAA,IAAhCC,MAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA4B,CAAC;IATzCG,0BAAA,OAAAd,WAAA;IACAc,0BAAA,OAAAZ,cAAA;IACAY,0BAAA,OAAAX,eAAA;IACAW,0BAAA,OAAAV,cAAA;IACAU,0BAAA,OAAAT,iBAAA;IACAS,0BAAA,OAAAR,WAAA;IACAQ,0BAAA,OAAAP,iBAAA;IACAO,0BAAA,OAAAN,kBAAA;IAGEO,qBAAA,CAAKf,WAAA,EAAL,MAAmBU,MAAA,CAAOM,UAAA,IAAc,IAAIvB,UAAA,CAAW,CAAlD;IACLsB,qBAAA,CAAKb,cAAA,EAAL,MAAsBQ,MAAA,CAAOO,aAAA,IAAiB,IAAIvB,aAAA,CAAc,CAA3D;IACLqB,qBAAA,CAAKZ,eAAA,EAAL,MAAuBO,MAAA,CAAOQ,cAAA,IAAkB,CAAC,CAA5C;IACLH,qBAAA,CAAKX,cAAA,EAAL,MAAsB,mBAAIe,GAAA,CAAI,CAAzB;IACLJ,qBAAA,CAAKV,iBAAA,EAAL,MAAyB,mBAAIc,GAAA,CAAI,CAA5B;IACLJ,qBAAA,CAAKT,WAAA,EAAL,MAAmB,CAAd;EACP;EAEAc,MAAA,EAAc;IAAA,IAAAC,gBAAA,EAAAC,iBAAA;IACZP,qBAAA,CAAKT,WAAA,EAAL,OAAAe,gBAAA,GAAAE,qBAAA,CAAKjB,WAAA,EAAL,IAAK,GAAAgB,iBAAA,GAAAD,gBAAA,IAAAA,gBAAA,IAAAC,iBAAA;IACL,IAAIC,qBAAA,CAAKjB,WAAA,EAAL,IAAK,MAAgB,GAAG;IAE5BS,qBAAA,CAAKR,iBAAA,EAAL,MAAyBZ,YAAA,CAAa6B,SAAA,CAAU,MAAOC,OAAA,IAAY;MACjE,IAAIA,OAAA,EAAS;QACX,MAAM,KAAKC,qBAAA,CAAsB;QACjCH,qBAAA,CAAKvB,WAAA,EAAL,IAAK,EAAY2B,OAAA,CAAQ;MAC3B;IACF,CAAC,CALI;IAMLZ,qBAAA,CAAKP,kBAAA,EAAL,MAA0BZ,aAAA,CAAc4B,SAAA,CAAU,MAAOI,MAAA,IAAW;MAClE,IAAIA,MAAA,EAAQ;QACV,MAAM,KAAKF,qBAAA,CAAsB;QACjCH,qBAAA,CAAKvB,WAAA,EAAL,IAAK,EAAY6B,QAAA,CAAS;MAC5B;IACF,CAAC,CALI;EAMP;EAEAC,QAAA,EAAgB;IAAA,IAAAC,iBAAA,EAAAC,iBAAA,EAAAC,sBAAA,EAAAC,sBAAA;IACdnB,qBAAA,CAAKT,WAAA,EAAL,OAAAyB,iBAAA,GAAAR,qBAAA,CAAKjB,WAAA,EAAL,IAAK,GAAA0B,iBAAA,GAAAD,iBAAA,IAAAA,iBAAA,IAAAC,iBAAA;IACL,IAAIT,qBAAA,CAAKjB,WAAA,EAAL,IAAK,MAAgB,GAAG;IAE5B,CAAA2B,sBAAA,GAAAV,qBAAA,CAAKhB,iBAAA,EAAL,IAAK,eAAA0B,sBAAA,eAAAA,sBAAA,CAAAE,IAAA,CAAL;IACApB,qBAAA,CAAKR,iBAAA,EAAL,MAAyB,MAApB;IAEL,CAAA2B,sBAAA,GAAAX,qBAAA,CAAKf,kBAAA,EAAL,IAAK,eAAA0B,sBAAA,eAAAA,sBAAA,CAAAC,IAAA,CAAL;IACApB,qBAAA,CAAKP,kBAAA,EAAL,MAA0B,MAArB;EACP;EAEA4B,WAAWC,OAAA,EAAgC;IACzC,OAAOd,qBAAA,CAAKvB,WAAA,EAAL,IAAK,EAAYsC,OAAA,CAAQ;MAAE,GAAGD,OAAA;MAASE,WAAA,EAAa;IAAW,CAAC,EACpE3B,MAAA;EACL;EAEA4B,WAAWH,OAAA,EAAmC;IAC5C,OAAOd,qBAAA,CAAKrB,cAAA,EAAL,IAAK,EAAeoC,OAAA,CAAQ;MAAE,GAAGD,OAAA;MAASI,MAAA,EAAQ;IAAU,CAAC,EAAE7B,MAAA;EACxE;EAYA8B,aAAaC,QAAA,EAAoB;IAAA,IAAAC,sBAAA;IAC/B,MAAMC,OAAA,GAAU,KAAKC,mBAAA,CAAoB;MAAEH;IAAS,CAAC;IACrD,QAAAC,sBAAA,GAAOrB,qBAAA,CAAKvB,WAAA,EAAL,IAAK,EAAY+C,GAAA,CAAIF,OAAA,CAAQG,SAAS,eAAAJ,sBAAA,uBAAtCA,sBAAA,CAAyCK,KAAA,CAAMC,IAAA;EACxD;EAEAC,gBAMEN,OAAA,EACgB;IAChB,MAAMO,UAAA,GAAa,KAAKV,YAAA,CAAoBG,OAAA,CAAQF,QAAQ;IAE5D,IAAIS,UAAA,KAAe,QAAW,OAAO,KAAKC,UAAA,CAAWR,OAAO,OACvD;MACH,MAAMS,gBAAA,GAAmB,KAAKR,mBAAA,CAAoBD,OAAO;MACzD,MAAMU,KAAA,GAAQhC,qBAAA,CAAKvB,WAAA,EAAL,IAAK,EAAYwD,KAAA,CAAM,MAAMF,gBAAgB;MAE3D,IACET,OAAA,CAAQY,iBAAA,IACRF,KAAA,CAAMG,aAAA,CAAcJ,gBAAA,CAAiBK,SAAS,GAC9C;QACA,KAAK,KAAKC,aAAA,CAAcN,gBAAgB;MAC1C;MAEA,OAAOO,OAAA,CAAQC,OAAA,CAAQV,UAAU;IACnC;EACF;EAEAW,eACE1B,OAAA,EAC6C;IAC7C,OAAOd,qBAAA,CAAKvB,WAAA,EAAL,IAAK,EAAYsC,OAAA,CAAQD,OAAO,EAAE2B,GAAA,CAAIC,IAAA,IAAyB;MAAA,IAAxB;QAAEtB,QAAA;QAAUM;MAAM,IAAAgB,IAAA;MAC9D,MAAMf,IAAA,GAAOD,KAAA,CAAMC,IAAA;MACnB,OAAO,CAACP,QAAA,EAAUO,IAAI;IACxB,CAAC;EACH;EAEAgB,aAUEvB,QAAA,EACAwB,OAAA,EAIAtB,OAAA,EACkC;IAClC,MAAMS,gBAAA,GAAmB,KAAKR,mBAAA,CAM5B;MAAEH;IAAS,CAAC;IAEd,MAAMY,KAAA,GAAQhC,qBAAA,CAAKvB,WAAA,EAAL,IAAK,EAAY+C,GAAA,CAC7BO,gBAAA,CAAiBN,SACnB;IACA,MAAMoB,QAAA,GAAWb,KAAA,aAAAA,KAAA,uBAAAA,KAAA,CAAON,KAAA,CAAMC,IAAA;IAC9B,MAAMA,IAAA,GAAO/D,gBAAA,CAAiBgF,OAAA,EAASC,QAAQ;IAE/C,IAAIlB,IAAA,KAAS,QAAW;MACtB,OAAO;IACT;IAEA,OAAO3B,qBAAA,CAAKvB,WAAA,EAAL,IAAK,EACTwD,KAAA,CAAM,MAAMF,gBAAgB,EAC5Be,OAAA,CAAQnB,IAAA,EAAM;MAAE,GAAGL,OAAA;MAASyB,MAAA,EAAQ;IAAK,CAAC;EAC/C;EAEAC,eACElC,OAAA,EACA8B,OAAA,EACAtB,OAAA,EAC6C;IAC7C,OAAOhD,aAAA,CAAc2E,KAAA,CAAM,MACzBjD,qBAAA,CAAKvB,WAAA,EAAL,IAAK,EACFsC,OAAA,CAAQD,OAAO,EACf2B,GAAA,CAAIS,KAAA;MAAA,IAAC;QAAE9B;MAAS,IAAA8B,KAAA;MAAA,OAAM,CACrB9B,QAAA,EACA,KAAKuB,YAAA,CAA2BvB,QAAA,EAAUwB,OAAA,EAAStB,OAAO,EAC3D;IAAA,EACL;EACF;EAEA6B,cAWE/B,QAAA,EACsD;IAAA,IAAAgC,sBAAA;IACtD,MAAM9B,OAAA,GAAU,KAAKC,mBAAA,CAAoB;MAAEH;IAAS,CAAC;IACrD,QAAAgC,sBAAA,GAAOpD,qBAAA,CAAKvB,WAAA,EAAL,IAAK,EAAY+C,GAAA,CAAkCF,OAAA,CAAQG,SAAS,eAAA2B,sBAAA,uBAApEA,sBAAA,CACH1B,KAAA;EACN;EAEA2B,cAAcvC,OAAA,EAA8B;IAC1C,MAAMrB,UAAA,GAAaO,qBAAA,CAAKvB,WAAA,EAAL,IAAK;IACxBH,aAAA,CAAc2E,KAAA,CAAM,MAAM;MACxBxD,UAAA,CAAWsB,OAAA,CAAQD,OAAO,EAAEwC,OAAA,CAAStB,KAAA,IAAU;QAC7CvC,UAAA,CAAW8D,MAAA,CAAOvB,KAAK;MACzB,CAAC;IACH,CAAC;EACH;EAEAwB,aAAa1C,OAAA,EAAwBQ,OAAA,EAAuC;IAC1E,MAAM7B,UAAA,GAAaO,qBAAA,CAAKvB,WAAA,EAAL,IAAK;IAExB,MAAMgF,cAAA,GAAsC;MAC1CC,IAAA,EAAM;MACN,GAAG5C;IACL;IAEA,OAAOxC,aAAA,CAAc2E,KAAA,CAAM,MAAM;MAC/BxD,UAAA,CAAWsB,OAAA,CAAQD,OAAO,EAAEwC,OAAA,CAAStB,KAAA,IAAU;QAC7CA,KAAA,CAAM2B,KAAA,CAAM;MACd,CAAC;MACD,OAAO,KAAKC,cAAA,CAAeH,cAAA,EAAgBnC,OAAO;IACpD,CAAC;EACH;EAEAuC,cAAA,EAGiB;IAAA,IAFf/C,OAAA,GAAA1B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAwB,CAAC;IAAA,IACzB0E,aAAA,GAAA1E,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA+B,CAAC;IAEhC,MAAM2E,sBAAA,GAAyB;MAAEC,MAAA,EAAQ;MAAM,GAAGF;IAAc;IAEhE,MAAMG,QAAA,GAAW3F,aAAA,CAAc2E,KAAA,CAAM,MACnCjD,qBAAA,CAAKvB,WAAA,EAAL,IAAK,EACFsC,OAAA,CAAQD,OAAO,EACf2B,GAAA,CAAKT,KAAA,IAAUA,KAAA,CAAMkC,MAAA,CAAOH,sBAAsB,CAAC,CACxD;IAEA,OAAOzB,OAAA,CAAQ6B,GAAA,CAAIF,QAAQ,EAAEG,IAAA,CAAKrG,IAAI,EAAEsG,KAAA,CAAMtG,IAAI;EACpD;EAEAuG,kBAAA,EAGiB;IAAA,IAFfxD,OAAA,GAAA1B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAkC,CAAC;IAAA,IACnCkC,OAAA,GAAAlC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA6B,CAAC;IAE9B,OAAOd,aAAA,CAAc2E,KAAA,CAAM,MAAM;MAAA,IAAAsB,KAAA,EAAAC,oBAAA;MAC/BxE,qBAAA,CAAKvB,WAAA,EAAL,IAAK,EAAYsC,OAAA,CAAQD,OAAO,EAAEwC,OAAA,CAAStB,KAAA,IAAU;QACnDA,KAAA,CAAMyC,UAAA,CAAW;MACnB,CAAC;MAED,IAAI3D,OAAA,CAAQ4D,WAAA,KAAgB,QAAQ;QAClC,OAAOpC,OAAA,CAAQC,OAAA,CAAQ;MACzB;MACA,MAAMkB,cAAA,GAAsC;QAC1C,GAAG3C,OAAA;QACH4C,IAAA,GAAAa,KAAA,IAAAC,oBAAA,GAAM1D,OAAA,CAAQ4D,WAAA,cAAAF,oBAAA,cAAAA,oBAAA,GAAe1D,OAAA,CAAQ4C,IAAA,cAAAa,KAAA,cAAAA,KAAA,GAAQ;MAC/C;MACA,OAAO,KAAKX,cAAA,CAAeH,cAAA,EAAgBnC,OAAO;IACpD,CAAC;EACH;EAEAsC,eAAA,EAGiB;IAAA,IAAAe,qBAAA;IAAA,IAFf7D,OAAA,GAAA1B,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA+B,CAAC;IAAA,IAChCkC,OAAA,GAAAlC,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;IAEA,MAAMsF,YAAA,GAAe;MACnB,GAAGtD,OAAA;MACHuD,aAAA,GAAAF,qBAAA,GAAerD,OAAA,aAAAA,OAAA,uBAAAA,OAAA,CAASuD,aAAA,cAAAF,qBAAA,cAAAA,qBAAA,GAAiB;IAC3C;IACA,MAAMV,QAAA,GAAW3F,aAAA,CAAc2E,KAAA,CAAM,MACnCjD,qBAAA,CAAKvB,WAAA,EAAL,IAAK,EACFsC,OAAA,CAAQD,OAAO,EACfgE,MAAA,CAAQ9C,KAAA,IAAU,CAACA,KAAA,CAAM+C,UAAA,CAAW,CAAC,EACrCtC,GAAA,CAAKT,KAAA,IAAU;MACd,IAAIgD,OAAA,GAAUhD,KAAA,CAAMiD,KAAA,CAAM,QAAWL,YAAY;MACjD,IAAI,CAACA,YAAA,CAAaM,YAAA,EAAc;QAC9BF,OAAA,GAAUA,OAAA,CAAQX,KAAA,CAAMtG,IAAI;MAC9B;MACA,OAAOiE,KAAA,CAAMN,KAAA,CAAMV,WAAA,KAAgB,WAC/BsB,OAAA,CAAQC,OAAA,CAAQ,IAChByC,OAAA;IACN,CAAC,CACL;IAEA,OAAO1C,OAAA,CAAQ6B,GAAA,CAAIF,QAAQ,EAAEG,IAAA,CAAKrG,IAAI;EACxC;EAEA+D,WAOER,OAAA,EAOgB;IAChB,MAAMS,gBAAA,GAAmB,KAAKR,mBAAA,CAAoBD,OAAO;IAGzD,IAAIS,gBAAA,CAAiBoD,KAAA,KAAU,QAAW;MACxCpD,gBAAA,CAAiBoD,KAAA,GAAQ;IAC3B;IAEA,MAAMnD,KAAA,GAAQhC,qBAAA,CAAKvB,WAAA,EAAL,IAAK,EAAYwD,KAAA,CAAM,MAAMF,gBAAgB;IAE3D,OAAOC,KAAA,CAAMG,aAAA,CAAcJ,gBAAA,CAAiBK,SAAS,IACjDJ,KAAA,CAAMiD,KAAA,CAAMlD,gBAAgB,IAC5BO,OAAA,CAAQC,OAAA,CAAQP,KAAA,CAAMN,KAAA,CAAMC,IAAa;EAC/C;EAEAU,cAMEf,OAAA,EACe;IACf,OAAO,KAAKQ,UAAA,CAAWR,OAAO,EAAE8C,IAAA,CAAKrG,IAAI,EAAEsG,KAAA,CAAMtG,IAAI;EACvD;EAEAqH,mBAOE9D,OAAA,EAO0C;IAC1CA,OAAA,CAAQ+D,QAAA,GAAW9G,qBAAA,CAKjB+C,OAAA,CAAQgE,KAAK;IACf,OAAO,KAAKxD,UAAA,CAAWR,OAAO;EAChC;EAEAiE,sBAOEjE,OAAA,EAOe;IACf,OAAO,KAAK8D,kBAAA,CAAmB9D,OAAO,EAAE8C,IAAA,CAAKrG,IAAI,EAAEsG,KAAA,CAAMtG,IAAI;EAC/D;EAEAoC,sBAAA,EAA0C;IACxC,IAAI9B,aAAA,CAAcmH,QAAA,CAAS,GAAG;MAC5B,OAAOxF,qBAAA,CAAKrB,cAAA,EAAL,IAAK,EAAewB,qBAAA,CAAsB;IACnD;IACA,OAAOmC,OAAA,CAAQC,OAAA,CAAQ;EACzB;EAEAkD,cAAA,EAA4B;IAC1B,OAAOzF,qBAAA,CAAKvB,WAAA,EAAL,IAAK;EACd;EAEAiH,iBAAA,EAAkC;IAChC,OAAO1F,qBAAA,CAAKrB,cAAA,EAAL,IAAK;EACd;EAEAgH,kBAAA,EAAoC;IAClC,OAAO3F,qBAAA,CAAKpB,eAAA,EAAL,IAAK;EACd;EAEAgH,kBAAkBtE,OAAA,EAA+B;IAC/C9B,qBAAA,CAAKZ,eAAA,EAAL,MAAuB0C,OAAlB;EACP;EAEAuE,iBACEzE,QAAA,EACAE,OAAA,EAGM;IACNtB,qBAAA,CAAKnB,cAAA,EAAL,IAAK,EAAeiH,GAAA,CAAIjI,OAAA,CAAQuD,QAAQ,GAAG;MACzCA,QAAA;MACAzB,cAAA,EAAgB2B;IAClB,CAAC;EACH;EAEAyE,iBACE3E,QAAA,EACsE;IACtE,MAAM4E,QAAA,GAAW,CAAC,GAAGhG,qBAAA,CAAKnB,cAAA,EAAL,IAAK,EAAeoH,MAAA,CAAO,CAAC;IAEjD,IAAIC,MAAA,GAGA,CAAC;IAELF,QAAA,CAAS1C,OAAA,CAAS6C,YAAA,IAAiB;MACjC,IAAInI,eAAA,CAAgBoD,QAAA,EAAU+E,YAAA,CAAa/E,QAAQ,GAAG;QACpD8E,MAAA,GAAS;UAAE,GAAGA,MAAA;UAAQ,GAAGC,YAAA,CAAaxG;QAAe;MACvD;IACF,CAAC;IACD,OAAOuG,MAAA;EACT;EAEAE,oBACEC,WAAA,EACA/E,OAAA,EAIM;IACNtB,qBAAA,CAAKlB,iBAAA,EAAL,IAAK,EAAkBgH,GAAA,CAAIjI,OAAA,CAAQwI,WAAW,GAAG;MAC/CA,WAAA;MACA1G,cAAA,EAAgB2B;IAClB,CAAC;EACH;EAEAgF,oBACED,WAAA,EAC6C;IAC7C,MAAML,QAAA,GAAW,CAAC,GAAGhG,qBAAA,CAAKlB,iBAAA,EAAL,IAAK,EAAkBmH,MAAA,CAAO,CAAC;IAEpD,IAAIC,MAAA,GAAsD,CAAC;IAE3DF,QAAA,CAAS1C,OAAA,CAAS6C,YAAA,IAAiB;MACjC,IAAInI,eAAA,CAAgBqI,WAAA,EAAaF,YAAA,CAAaE,WAAW,GAAG;QAC1DH,MAAA,GAAS;UAAE,GAAGA,MAAA;UAAQ,GAAGC,YAAA,CAAaxG;QAAe;MACvD;IACF,CAAC;IAED,OAAOuG,MAAA;EACT;EAEA3E,oBAQED,OAAA,EAsBA;IACA,IAAIA,OAAA,CAAQiF,UAAA,EAAY;MACtB,OAAOjF,OAAA;IAOT;IAEA,MAAMS,gBAAA,GAAmB;MACvB,GAAG/B,qBAAA,CAAKpB,eAAA,EAAL,IAAK,EAAgB4H,OAAA;MACxB,GAAG,KAAKT,gBAAA,CAAiBzE,OAAA,CAAQF,QAAQ;MACzC,GAAGE,OAAA;MACHiF,UAAA,EAAY;IACd;IAEA,IAAI,CAACxE,gBAAA,CAAiBN,SAAA,EAAW;MAC/BM,gBAAA,CAAiBN,SAAA,GAAY3D,qBAAA,CAC3BiE,gBAAA,CAAiBX,QAAA,EACjBW,gBACF;IACF;IAGA,IAAIA,gBAAA,CAAiB0E,kBAAA,KAAuB,QAAW;MACrD1E,gBAAA,CAAiB0E,kBAAA,GACf1E,gBAAA,CAAiB2E,WAAA,KAAgB;IACrC;IACA,IAAI3E,gBAAA,CAAiBmD,YAAA,KAAiB,QAAW;MAC/CnD,gBAAA,CAAiBmD,YAAA,GAAe,CAAC,CAACnD,gBAAA,CAAiB4E,QAAA;IACrD;IAEA,IAAI,CAAC5E,gBAAA,CAAiB2E,WAAA,IAAe3E,gBAAA,CAAiB6E,SAAA,EAAW;MAC/D7E,gBAAA,CAAiB2E,WAAA,GAAc;IACjC;IAEA,IACE3E,gBAAA,CAAiB8E,OAAA,KAAY,QAC7B9E,gBAAA,CAAiB+E,OAAA,KAAY7I,SAAA,EAC7B;MACA8D,gBAAA,CAAiB8E,OAAA,GAAU;IAC7B;IAEA,OAAO9E,gBAAA;EAOT;EAEAgF,uBACEzF,OAAA,EACG;IACH,IAAIA,OAAA,aAAAA,OAAA,eAAAA,OAAA,CAASiF,UAAA,EAAY;MACvB,OAAOjF,OAAA;IACT;IACA,OAAO;MACL,GAAGtB,qBAAA,CAAKpB,eAAA,EAAL,IAAK,EAAgBoI,SAAA;MACxB,IAAI,CAAA1F,OAAA,aAAAA,OAAA,uBAAAA,OAAA,CAAS+E,WAAA,KACX,KAAKC,mBAAA,CAAoBhF,OAAA,CAAQ+E,WAAW;MAC9C,GAAG/E,OAAA;MACHiF,UAAA,EAAY;IACd;EACF;EAEAU,MAAA,EAAc;IACZjH,qBAAA,CAAKvB,WAAA,EAAL,IAAK,EAAYwI,KAAA,CAAM;IACvBjH,qBAAA,CAAKrB,cAAA,EAAL,IAAK,EAAesI,KAAA,CAAM;EAC5B;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}